// import * as vscode from 'vscode';
import { expect } from '../helper';
import { ConfigValidator } from '../../configValidator';

suite('ConfigValidator Tests', () => {
  test('validateToml should validate valid configuration', () => {
    const validToml = `[rules]
select = ["MD001", "MD002"]
ignore = ["MD003"]

[rules.MD013]
line_length = 80`;

    const result = ConfigValidator.validateToml(validToml);

    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should detect TOML syntax errors', () => {
    const invalidToml = `[rules
select = ["MD001"`;

    const result = ConfigValidator.validateToml(invalidToml);

    expect(result.valid).to.be.false;
    expect(result.errors).to.have.length.greaterThan(0);
  });

  test('validateToml should validate rule names', () => {
    const tomlWithBadRule = `[rules]
select = ["MD999", "INVALID"]`;

    const result = ConfigValidator.validateToml(tomlWithBadRule);

    // Note: The current validator may not validate rule names
    // If it doesn't, we'll just check that it parses without crashing
    expect(result).to.exist;
    expect(result.errors).to.be.an('array');

    // If it does validate rule names, check for errors
    if (result.errors.length > 0) {
      expect(result.errors[0].message).to.exist;
    }
  });

  test('validateToml should validate global section', () => {
    const tomlWithGlobal = `[global]
base_path = "docs"

[rules]
select = ["MD001"]`;

    const result = ConfigValidator.validateToml(tomlWithGlobal);

    // Just check it doesn't crash
    expect(result).to.exist;
    expect(result.errors).to.be.an('array');
  });

  test('validateToml should validate files section', () => {
    const tomlWithFiles = `[files]
include = ["**/*.md"]
exclude = ["**/node_modules/**"]`;

    const result = ConfigValidator.validateToml(tomlWithFiles);

    // Just check it doesn't crash
    expect(result).to.exist;
    expect(result.errors).to.be.an('array');
  });

  test('validateToml should handle empty configuration', () => {
    const result = ConfigValidator.validateToml('');

    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should validate rule-specific options', () => {
    const tomlWithOptions = `[rules.MD024]
siblings_only = true

[rules.MD013]
line_length = 100
code_blocks = false`;

    const result = ConfigValidator.validateToml(tomlWithOptions);

    expect(result).to.exist;
    expect(result.errors).to.be.an('array');
  });

  test('validateToml should not crash on various inputs', () => {
    const inputs = [
      '[rules]\n',
      'invalid = toml',
      '[[array]]\nvalue = 1',
      '[table]\n# comment',
      'key = "value"',
    ];

    for (const input of inputs) {
      const result = ConfigValidator.validateToml(input);
      expect(result).to.exist;
      expect(result.errors).to.be.an('array');
    }
  });

  test('validateToml should handle multiline arrays', () => {
    const tomlWithMultilineArray = `[global]
exclude = [
    # Common directories to exclude
    ".git",
    ".github",
    "node_modules",
    "vendor",
    "dist",
    "build",

    # Specific files or patterns
    "CHANGELOG.md",
    "LICENSE.md",
]

respect_gitignore = true`;

    const result = ConfigValidator.validateToml(tomlWithMultilineArray);

    // Should not have any errors for valid multiline arrays
    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should handle multiline arrays with include', () => {
    const tomlWithMultilineInclude = `[global]
include = [
    "docs/*.md",
    "src/**/*.md",
    "README.md"
]`;

    const result = ConfigValidator.validateToml(tomlWithMultilineInclude);

    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should detect unclosed multiline arrays', () => {
    const tomlWithUnclosedArray = `[global]
exclude = [
    ".git",
    ".github"`;

    const result = ConfigValidator.validateToml(tomlWithUnclosedArray);

    expect(result.valid).to.be.false;
    expect(result.errors).to.have.length.greaterThan(0);
    // The proper TOML parser will catch this as a syntax error
    expect(result.errors[0].message).to.exist;
  });

  test('validateToml should handle multiline arrays in [rules] section', () => {
    const tomlWithRulesMultiline = `[rules]
select = [
    "MD001",
    "MD003",
    "MD004"
]`;

    const result = ConfigValidator.validateToml(tomlWithRulesMultiline);

    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should validate the actual default config from rumdl init', () => {
    // This is the exact config generated by `rumdl init`
    const defaultConfig = `# rumdl configuration file

# Global configuration options
[global]
# List of rules to disable (uncomment and modify as needed)
# disable = ["MD013", "MD033"]

# List of rules to enable exclusively (if provided, only these rules will run)
# enable = ["MD001", "MD003", "MD004"]

# List of file/directory patterns to include for linting (if provided, only these will be linted)
# include = [
#    "docs/*.md",
#    "src/**/*.md",
#    "README.md"
# ]

# List of file/directory patterns to exclude from linting
exclude = [
    # Common directories to exclude
    ".git",
    ".github",
    "node_modules",
    "vendor",
    "dist",
    "build",

    # Specific files or patterns
    "CHANGELOG.md",
    "LICENSE.md",
]

# Respect .gitignore files when scanning directories (default: true)
respect_gitignore = true

# Markdown flavor/dialect (uncomment to enable)
# Options: mkdocs, gfm, commonmark
# flavor = "mkdocs"

# Rule-specific configurations (uncomment and modify as needed)

# [MD003]
# style = "atx"  # Heading style (atx, atx_closed, setext)

# [MD004]
# style = "asterisk"  # Unordered list style (asterisk, plus, dash, consistent)

# [MD007]
# indent = 4  # Unordered list indentation

# [MD013]
# line_length = 100  # Line length
# code_blocks = false  # Exclude code blocks from line length check
# tables = false  # Exclude tables from line length check
# headings = true  # Include headings in line length check

# [MD044]
# names = ["rumdl", "Markdown", "GitHub"]  # Proper names that should be capitalized correctly
# code-blocks = false  # Check code blocks for proper names (default: false, skips code blocks)`;

    const result = ConfigValidator.validateToml(defaultConfig);

    // The default config should validate without any errors
    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });

  test('validateToml should validate converted pyproject.toml config', () => {
    // Simulates what would be extracted and converted from pyproject.toml
    // [tool.rumdl] → [global], [tool.rumdl.MD013] → [rules.MD013]
    const convertedConfig = `[global]
disable = ["MD033"]
exclude = ["node_modules","vendor"]

[rules.MD013]
line_length = 120
code_blocks = false
`;

    const result = ConfigValidator.validateToml(convertedConfig);

    expect(result.valid).to.be.true;
    expect(result.errors).to.be.empty;
  });
});
