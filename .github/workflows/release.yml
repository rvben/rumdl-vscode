name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.7, v1.0.0, etc.

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release Extension
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Download rumdl binaries
        run: npm run download-rumdl

      - name: Verify rumdl installation
        run: npm run verify-rumdl

      - name: Run tests
        run: npm test

      - name: Package extension
        run: npm run vsce:package

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${{ steps.get_version.outputs.VERSION }}

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Package.json version: $PACKAGE_VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          fi

          echo "✅ Version verified: $PACKAGE_VERSION"

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}

          # Extract the section for this version from CHANGELOG.md
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md || echo "No changelog found for version $VERSION")

          # Save to file for GitHub release
          echo "$CHANGELOG_CONTENT" > release_notes.md

          # Set output (escaped for JSON)
          {
            echo 'NOTES<<EOF'
            echo "$CHANGELOG_CONTENT"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Publish to Visual Studio Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          if [ -z "$VSCE_PAT" ]; then
            echo "⚠️ VSCE_PAT secret not set, skipping VS Code Marketplace publish"
          else
            echo "📦 Publishing to VS Code Marketplace..."
            npx vsce publish --packagePath rumdl-${{ steps.get_version.outputs.VERSION }}.vsix
          fi

      - name: Publish to Open VSX Registry
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          if [ -z "$OVSX_PAT" ]; then
            echo "⚠️ OVSX_PAT secret not set, skipping Open VSX publish"
          else
            echo "📦 Publishing to Open VSX Registry..."
            npx ovsx publish rumdl-${{ steps.get_version.outputs.VERSION }}.vsix --pat $OVSX_PAT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: rumdl-vscode v${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            rumdl-${{ steps.get_version.outputs.VERSION }}.vsix
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🎉 Release Successful!

          **rumdl-vscode v${{ steps.get_version.outputs.VERSION }}** has been released!

          ## 📦 What was published:
          - ✅ VS Code Marketplace
          - ✅ Open VSX Registry
          - ✅ GitHub Release

          ## 🔗 Links:
          - [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=rumdl.rumdl)
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
          - [Extension File](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/rumdl-${{ steps.get_version.outputs.VERSION }}.vsix)

          ## 📋 Installation:
          ```bash
          # Install from marketplace
          code --install-extension rumdl.rumdl

          # Or install from VSIX file
          code --install-extension rumdl-${{ steps.get_version.outputs.VERSION }}.vsix
          ```
          EOF